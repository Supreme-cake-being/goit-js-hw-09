{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAASH,SAASC,cAAc,wBAChCG,EAAcJ,SAASC,cAAc,SA+B3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GACpBA,E,IAtCPO,EAAAjB,GAASkB,OAAOC,KAAK,CACnBC,QAAS,CACPC,kBAAmB,SAGrBC,QAAS,CACPD,kBAAmB,WAIvBd,EAAYgB,iBAAiB,UAAU,SAACC,GACtCA,EAAEC,iBAIF,IAFA,IAESC,EAAI,EAAGA,EAAIC,SAASrB,EAAOsB,OAAQF,GAAK,EAG/ClB,EAAckB,EAAI,EAFVC,SAASzB,EAAW0B,OAASF,EAAIC,SAAStB,EAAUuB,QAGzDC,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBO,EAAAjB,GAASkB,OAAOE,QAAQ,qBAAoCW,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEnEsB,OAAM,SAAAF,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBO,EAAAjB,GAASkB,OAAOI,QAAQ,oBAAmCS,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGvEH,EAAY0B,O","sources":["src/js/03-promises.js"],"sourcesContent":["// notiflix\nimport Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.6.min.css\";\n\nconst firstDelay = document.querySelector(\"input[name='delay']\");\nconst delayStep = document.querySelector(\"input[name='step']\");\nconst amount = document.querySelector(\"input[name='amount']\");\nconst promiseForm = document.querySelector(\".form\");\n\nNotiflix.Notify.init({  \n  success: {\n    notiflixIconColor: 'white',\n  },\n\n  failure: {\n    notiflixIconColor: 'white',\n  }\n});\n\npromiseForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  let delay = 0;\n  \n  for (let i = 0; i < parseInt(amount.value); i += 1) {\n    delay = parseInt(firstDelay.value) + i * parseInt(delayStep.value);\n\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  promiseForm.reset()\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve)\n        resolve({ position, delay });\n      else\n        reject({ position, delay });\n    }, delay);\n  });\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$promiseForm","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$parcel$interopDefault","Notify","init","success","notiflixIconColor","failure","addEventListener","e","preventDefault","i","parseInt","value","then","param","concat","catch","reset"],"version":3,"file":"03-promises.ec3092c7.js.map"}